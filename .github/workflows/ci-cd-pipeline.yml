name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety pip-audit black flake8 mypy
          
      - name: Run security scan
        run: |
          chmod +x scripts/security_scan.sh
          ./scripts/security_scan.sh
          
      - name: Run code formatting check
        run: black --check --diff .
        
      - name: Run linting
        run: flake8 .
        
      - name: Run type checking
        run: mypy . --ignore-missing-imports
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            safety-report.json
            pip-audit-report.json
            security-summary.json

  # Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_kbi_labs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist
          
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_NAME=test_kbi_labs" >> $GITHUB_ENV
          echo "DATABASE_USER=test_user" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=test_password" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci-cd-pipeline" >> $GITHUB_ENV
          
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=90 -v
          
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            htmlcov/
            coverage.xml

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (Zero Downtime)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://kbilabs.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy with zero downtime
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          # Set up SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          
          # Deploy with zero downtime
          ssh -i ~/.ssh/deploy_key $USER@$HOST << 'EOF'
            set -e
            
            echo "üöÄ Starting zero-downtime deployment..."
            
            cd /home/ubuntu/kbi_labs || exit 1
            
            # Pull latest changes
            git fetch origin main
            git reset --hard origin/main
            
            # Update dependencies
            pip install -r requirements.txt --quiet
            
            # Run quick health tests
            python -c "import main_server; print('‚úÖ App imports successfully')"
            
            # Graceful restart with health check
            echo "üîÑ Performing graceful restart..."
            
            # Health check function
            check_health() {
              local port=$1
              local max_attempts=30
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                if curl -f http://localhost:$port/health >/dev/null 2>&1; then
                  return 0
                fi
                sleep 2
                attempt=$((attempt + 1))
              done
              return 1
            }
            
            # Start backup instance on port 8001
            echo "Starting backup instance..."
            PORT=8001 nohup python main_server.py > backup.log 2>&1 &
            BACKUP_PID=$!
            
            # Wait for backup to be healthy
            if check_health 8001; then
              echo "‚úÖ Backup instance healthy"
              
              # Stop main instance
              sudo systemctl stop kbi-api || pkill -f "python main_server.py" || true
              sleep 2
              
              # Start main instance
              sudo systemctl start kbi-api || {
                nohup python main_server.py > main.log 2>&1 &
                MAIN_PID=$!
              }
              
              # Wait for main to be healthy
              if check_health 8000; then
                echo "‚úÖ Main instance healthy - stopping backup"
                kill $BACKUP_PID || true
                echo "üéâ Zero-downtime deployment completed!"
              else
                echo "‚ùå Main instance unhealthy - keeping backup running"
                exit 1
              fi
            else
              echo "‚ùå Backup instance failed - aborting"
              kill $BACKUP_PID || true
              exit 1
            fi
          EOF
          
      - name: Verify deployment
        run: |
          echo "üîç Verifying production deployment..."
          
          # Basic health check (adjust URL as needed)
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.EC2_HOST }}:8000/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Production health check passed"
          else
            echo "‚ùå Production health check failed (HTTP $response)"
            exit 1
          fi